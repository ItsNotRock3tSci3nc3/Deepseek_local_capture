import os
import time
import cv2
import pyscreenshot 
import deepseek
print("DeepSeek-R1 is installed:", hasattr(deepseek, '__version__'))

# Initialize DeepSeek-R1 client
model_name = "deepseek-r1"
tokenizer = None
model = None

def full_screenshot():
    image = pyscreenshot.grab()
    image.save("./data/screenshots_png/sc_pysc.png")
    #image.save("./data/screenshots/sc_pysc.jpg")
    img_path = "./data/screenshots_png/sc_pysc.png"
    image = cv2.imread(img_path)
    return image




def analyze_image(image):
    """Analyze the image using DeepSeek-R1 and return the result."""
    global tokenizer, model

    #if not image:
     #   raise ValueError("Image is empty")

    # Convert image to bytes
    _, buffer = cv2.imencode('.png', image)
    image_bytes = memoryview(buffer.tobytes())

    try:
        response = model.chat(tokenizer.encode(
            "Analyze this image and provide a detailed description of its content.",
            return_tokenization=False,
            max_tokens=500
        ), image_bytes, stream=True).text

        return response

    except Exception as e:
        print(f"Error analyzing image: {e}")
        return None

def display_image(image):
    """Display the image using matplotlib."""
    import matplotlib.pyplot as plt
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.show()

def main():
    # Capture screenshot
    #full_or_partial = input("Capture a full-screen screenshot or specify 'custom' window: ").strip().lower()

    #if full_or_partial == "custom":
    #    print("Please specify the custom window name to capture. For example, 'my_window'.")
    #    return

    time.sleep(1)
    #screenshot = take_screenshot(full_or_partial)
    screenshot = full_screenshot()

    # Analyze image
    analysis_result = analyze_image(screenshot)

    # Display image (optional visualization if needed)
    display_image(screenshot)

    # Output result
    print("\nAnalysis Result:")
    print(analysis_result)

if __name__ == "__main__":
    main()